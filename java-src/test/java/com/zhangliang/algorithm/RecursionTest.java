package com.zhangliang.algorithm;

import static org.junit.Assert.assertEquals;
import java.util.*;
import java.util.List;

import org.junit.Test;

public class RecursionTest {

    @Test
    public void testCase() {
        Recursion.Permutation s = new Recursion.Permutation();
        List<List<Integer>> ans = s.permute(new int[] { 1, 2, 3 });
        assertEquals(
                Arrays.deepToString(
                        new int[][] { { 1, 2, 3 }, { 1, 3, 2 }, { 2, 1, 3 }, { 2, 3, 1 }, { 3, 2, 1 }, { 3, 1, 2 } }),
                ans.toString());
    }

    @Test
    public void testCase2() {
        Recursion.CoinDivision s = new Recursion.CoinDivision();
        List<List<Integer>> ans = s.divide(99, new int[] { 25, 10, 5, 1 });
        assertEquals(
                "[[0, 0, 0, 99], [0, 0, 1, 94], [0, 0, 2, 89], [0, 0, 3, 84], [0, 0, 4, 79], [0, 0, 5, 74], [0, 0, 6, 69], [0, 0, 7, 64], [0, 0, 8, 59], [0, 0, 9, 54], [0, 0, 10, 49], [0, 0, 11, 44], [0, 0, 12, 39], [0, 0, 13, 34], [0, 0, 14, 29], [0, 0, 15, 24], [0, 0, 16, 19], [0, 0, 17, 14], [0, 0, 18, 9], [0, 0, 19, 4], [0, 1, 0, 89], [0, 1, 1, 84], [0, 1, 2, 79], [0, 1, 3, 74], [0, 1, 4, 69], [0, 1, 5, 64], [0, 1, 6, 59], [0, 1, 7, 54], [0, 1, 8, 49], [0, 1, 9, 44], [0, 1, 10, 39], [0, 1, 11, 34], [0, 1, 12, 29], [0, 1, 13, 24], [0, 1, 14, 19], [0, 1, 15, 14], [0, 1, 16, 9], [0, 1, 17, 4], [0, 2, 0, 79], [0, 2, 1, 74], [0, 2, 2, 69], [0, 2, 3, 64], [0, 2, 4, 59], [0, 2, 5, 54], [0, 2, 6, 49], [0, 2, 7, 44], [0, 2, 8, 39], [0, 2, 9, 34], [0, 2, 10, 29], [0, 2, 11, 24], [0, 2, 12, 19], [0, 2, 13, 14], [0, 2, 14, 9], [0, 2, 15, 4], [0, 3, 0, 69], [0, 3, 1, 64], [0, 3, 2, 59], [0, 3, 3, 54], [0, 3, 4, 49], [0, 3, 5, 44], [0, 3, 6, 39], [0, 3, 7, 34], [0, 3, 8, 29], [0, 3, 9, 24], [0, 3, 10, 19], [0, 3, 11, 14], [0, 3, 12, 9], [0, 3, 13, 4], [0, 4, 0, 59], [0, 4, 1, 54], [0, 4, 2, 49], [0, 4, 3, 44], [0, 4, 4, 39], [0, 4, 5, 34], [0, 4, 6, 29], [0, 4, 7, 24], [0, 4, 8, 19], [0, 4, 9, 14], [0, 4, 10, 9], [0, 4, 11, 4], [0, 5, 0, 49], [0, 5, 1, 44], [0, 5, 2, 39], [0, 5, 3, 34], [0, 5, 4, 29], [0, 5, 5, 24], [0, 5, 6, 19], [0, 5, 7, 14], [0, 5, 8, 9], [0, 5, 9, 4], [0, 6, 0, 39], [0, 6, 1, 34], [0, 6, 2, 29], [0, 6, 3, 24], [0, 6, 4, 19], [0, 6, 5, 14], [0, 6, 6, 9], [0, 6, 7, 4], [0, 7, 0, 29], [0, 7, 1, 24], [0, 7, 2, 19], [0, 7, 3, 14], [0, 7, 4, 9], [0, 7, 5, 4], [0, 8, 0, 19], [0, 8, 1, 14], [0, 8, 2, 9], [0, 8, 3, 4], [0, 9, 0, 9], [0, 9, 1, 4], [1, 0, 0, 74], [1, 0, 1, 69], [1, 0, 2, 64], [1, 0, 3, 59], [1, 0, 4, 54], [1, 0, 5, 49], [1, 0, 6, 44], [1, 0, 7, 39], [1, 0, 8, 34], [1, 0, 9, 29], [1, 0, 10, 24], [1, 0, 11, 19], [1, 0, 12, 14], [1, 0, 13, 9], [1, 0, 14, 4], [1, 1, 0, 64], [1, 1, 1, 59], [1, 1, 2, 54], [1, 1, 3, 49], [1, 1, 4, 44], [1, 1, 5, 39], [1, 1, 6, 34], [1, 1, 7, 29], [1, 1, 8, 24], [1, 1, 9, 19], [1, 1, 10, 14], [1, 1, 11, 9], [1, 1, 12, 4], [1, 2, 0, 54], [1, 2, 1, 49], [1, 2, 2, 44], [1, 2, 3, 39], [1, 2, 4, 34], [1, 2, 5, 29], [1, 2, 6, 24], [1, 2, 7, 19], [1, 2, 8, 14], [1, 2, 9, 9], [1, 2, 10, 4], [1, 3, 0, 44], [1, 3, 1, 39], [1, 3, 2, 34], [1, 3, 3, 29], [1, 3, 4, 24], [1, 3, 5, 19], [1, 3, 6, 14], [1, 3, 7, 9], [1, 3, 8, 4], [1, 4, 0, 34], [1, 4, 1, 29], [1, 4, 2, 24], [1, 4, 3, 19], [1, 4, 4, 14], [1, 4, 5, 9], [1, 4, 6, 4], [1, 5, 0, 24], [1, 5, 1, 19], [1, 5, 2, 14], [1, 5, 3, 9], [1, 5, 4, 4], [1, 6, 0, 14], [1, 6, 1, 9], [1, 6, 2, 4], [1, 7, 0, 4], [2, 0, 0, 49], [2, 0, 1, 44], [2, 0, 2, 39], [2, 0, 3, 34], [2, 0, 4, 29], [2, 0, 5, 24], [2, 0, 6, 19], [2, 0, 7, 14], [2, 0, 8, 9], [2, 0, 9, 4], [2, 1, 0, 39], [2, 1, 1, 34], [2, 1, 2, 29], [2, 1, 3, 24], [2, 1, 4, 19], [2, 1, 5, 14], [2, 1, 6, 9], [2, 1, 7, 4], [2, 2, 0, 29], [2, 2, 1, 24], [2, 2, 2, 19], [2, 2, 3, 14], [2, 2, 4, 9], [2, 2, 5, 4], [2, 3, 0, 19], [2, 3, 1, 14], [2, 3, 2, 9], [2, 3, 3, 4], [2, 4, 0, 9], [2, 4, 1, 4], [3, 0, 0, 24], [3, 0, 1, 19], [3, 0, 2, 14], [3, 0, 3, 9], [3, 0, 4, 4], [3, 1, 0, 14], [3, 1, 1, 9], [3, 1, 2, 4], [3, 2, 0, 4]]",
                ans.toString());
    }

}
