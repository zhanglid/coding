package com.zhangliang.leetcode;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class LongestPalindromicSubstringTest {

    @Test
    public void testDefault() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome("babad");
        assertTrue(ans.equals("bab") || ans.equals("aba"));
    }

    @Test
    public void testSameString() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome("aaaa");
        assertEquals("aaaa", ans);
    }

    @Test
    public void testCaseString() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome("cbbd");
        assertEquals("bb", ans);
    }

    @Test
    public void testCase2String() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome("bananas");
        assertEquals("anana", ans);
    }

    @Test
    public void errCase() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome("");
        assertEquals("", ans);
    }

    @Test
    public void errCase2() {
        LongestPalindromicSubstring s = new LongestPalindromicSubstring();
        String ans = s.longestPalindrome(

        assertEquals(

                ans);
    }
}